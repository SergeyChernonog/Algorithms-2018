@file:Suppress("UNUSED_PARAMETER")

package lesson1

import java.io.File
import java.util.*

/**
 * Сортировка времён
 *
 * Простая
 * (Модифицированная задача с сайта acmp.ru)
 *
 * Во входном файле с именем inputName содержатся моменты времени в формате ЧЧ:ММ:СС,
 * каждый на отдельной строке. Пример:
 *
 * 13:15:19
 * 07:26:57
 * 10:00:03
 * 19:56:14
 * 13:15:19
 * 00:40:31
 *
 * Отсортировать моменты времени по возрастанию и вывести их в выходной файл с именем outputName,
 * сохраняя формат ЧЧ:ММ:СС. Одинаковые моменты времени выводить друг за другом. Пример:
 *
 * 00:40:31
 * 07:26:57
 * 10:00:03
 * 13:15:19
 * 13:15:19
 * 19:56:14
 *
 * В случае обнаружения неверного формата файла бросить любое исключение.
 */

/**
 * Чтение файла и запись в счетчик имеет сложность O(N), запись имеет сложность O(N). Сложность решения - O(N).
 * Затраты памяти на счетчик O(1).
 */

fun sortTimes(inputName: String, outputName: String) {
    val max = 24 * 60 * 60
    val counter = IntArray(max)
    File(inputName).readLines().forEach { counter[it.toSeconds()]++ }
    File(outputName).bufferedWriter().use {
        for (i in 0 until max) {
            while (counter[i] > 0) {
                it.write(i.toTimeFormat())
                it.newLine()
                counter[i]--
            }
        }
    }
}

fun String.toSeconds() = this.split(":").map { it.toInt() }
        .fold(0) { prev, next -> prev * 60 + next }

fun Int.toTimeFormat() = String.format(String.format("%02d:%02d:%02d", this / 3600, (this % 3600) / 60, this % 60))

/**
 * Сортировка адресов
 *
 * Средняя
 *
 * Во входном файле с именем inputName содержатся фамилии и имена жителей города с указанием улицы и номера дома,
 * где они прописаны. Пример:
 *
 * Петров Иван - Железнодорожная 3
 * Сидоров Петр - Садовая 5
 * Иванов Алексей - Железнодорожная 7
 * Сидорова Мария - Садовая 5
 * Иванов Михаил - Железнодорожная 7
 *
 * Людей в городе может быть до миллиона.
 *
 * Вывести записи в выходной файл outputName,
 * упорядоченными по названию улицы (по алфавиту) и номеру дома (по возрастанию).
 * Людей, живущих в одном доме, выводить через запятую по алфавиту (вначале по фамилии, потом по имени). Пример:
 *
 * Железнодорожная 3 - Петров Иван
 * Железнодорожная 7 - Иванов Алексей, Иванов Михаил
 * Садовая 5 - Сидоров Петр, Сидорова Мария
 *
 * В случае обнаружения неверного формата файла бросить любое исключение.
 */
fun sortAddresses(inputName: String, outputName: String) {
    TODO()
}

/**
 * Сортировка температур
 *
 * Средняя
 * (Модифицированная задача с сайта acmp.ru)
 *
 * Во входном файле заданы температуры различных участков абстрактной планеты с точностью до десятых градуса.
 * Температуры могут изменяться в диапазоне от -273.0 до +500.0.
 * Например:
 *
 * 24.7
 * -12.6
 * 121.3
 * -98.4
 * 99.5
 * -12.6
 * 11.0
 *
 * Количество строк в файле может достигать ста миллионов.
 * Вывести строки в выходной файл, отсортировав их по возрастанию температуры.
 * Повторяющиеся строки сохранить. Например:
 *
 * -98.4
 * -12.6
 * -12.6
 * 11.0
 * 24.7
 * 99.5
 * 121.3
 */

/**
 * Заполнение массива-счетчика имеет сложность O(N), запись в новый файл имеет сложность O(N),
 * сложность решения - O(N).
 * Разность температур задана, поэтому затраты памяти на массив-счетчик O(1).
 */

fun sortTemperatures(inputName: String, outputName: String) {
    val min = -2730
    val max = 5000

    val counter = IntArray(max - min + 1)
    File(inputName).bufferedReader().use {
        var line = it.readLine()
        while (line != null) {
            counter[(line.toDouble() * 10).toInt() - min]++
            line = it.readLine()
        }

    }
    File(outputName).bufferedWriter().use {
        for (i in 0 until counter.size) {
            while (counter[i] > 0) {
                it.write(((i + min) / 10.0).toString())
                counter[i]--
                it.newLine()
            }
        }
    }
}

/**
 * Сортировка последовательности
 *
 * Средняя
 * (Задача взята с сайта acmp.ru)
 *
 * В файле задана последовательность из n целых положительных чисел, каждое в своей строке, например:
 *
 * 1
 * 2
 * 3
 * 2
 * 3
 * 1
 * 2
 *
 * Необходимо найти число, которое встречается в этой последовательности наибольшее количество раз,
 * а если таких чисел несколько, то найти минимальное из них,
 * и после этого переместить все такие числа в конец заданной последовательности.
 * Порядок расположения остальных чисел должен остаться без изменения.
 *
 * 1
 * 3
 * 3
 * 1
 * 2
 * 2
 * 2
 */

/**
 * Заполнение словаря-счетчика имеет сложность O(N), вставка в словарь имеет сложность O(1), поиск самого большого
 * значения имеет сложность O(M), M - количество различных элементов в последовательности.
 * Запись в новый файл имеет сложность O(N).
 * Затраты памяти на словарь зависят от количества различных чисел в последовательности - O(M).
 */

fun sortSequence(inputName: String, outputName: String) {
    val counter = mutableMapOf<Int, Int>()
    for (line in File(inputName).readLines()) {
        val num = line.toInt()
        if (counter.contains(num)) {
            val count = counter[num]!! + 1
            counter[num] = count;
        } else counter[num] = 1
    }
    val minElement = counter.entries.maxBy { it.value }!!.key
    val maxCount = counter[minElement]!!
    File(outputName).bufferedWriter().use {
        for (line in File(inputName).readLines()) {
            if (line.toInt() != minElement) {
                it.write(line)
                it.newLine()
            }
        }
        for (i in maxCount downTo 1) {
            it.write(minElement.toString())
            it.newLine()
        }
    }
}

/**
 * Соединить два отсортированных массива в один
 *
 * Простая
 *
 * Задан отсортированный массив first и второй массив second,
 * первые first.size ячеек которого содержат null, а остальные ячейки также отсортированы.
 * Соединить оба массива в массиве second так, чтобы он оказался отсортирован. Пример:
 *
 * first = [4 9 15 20 28]
 * second = [null null null null null 1 3 9 13 18 23]
 *
 * Результат: second = [1 3 4 9 9 13 15 20 23 28]
 */
fun <T : Comparable<T>> mergeArrays(first: Array<T>, second: Array<T?>) {
    TODO()
}

